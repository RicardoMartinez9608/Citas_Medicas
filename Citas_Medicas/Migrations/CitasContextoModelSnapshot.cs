// <auto-generated />
using System;
using Citas_Medicas.Persistencia;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Citas_Medicas.Migrations
{
    [DbContext(typeof(CitasContexto))]
    partial class CitasContextoModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Citas_Medicas.Modelo.Citas", b =>
                {
                    b.Property<int>("Id_Cita")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DoctorId_Doctor")
                        .HasColumnType("int");

                    b.Property<int?>("EspecialidadesId_Especialidades")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha_Cita")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id_Doctor")
                        .HasColumnType("int");

                    b.Property<int>("Id_Especialidades")
                        .HasColumnType("int");

                    b.Property<int>("Id_Paciente")
                        .HasColumnType("int");

                    b.Property<int?>("PacienteId_Paciente")
                        .HasColumnType("int");

                    b.HasKey("Id_Cita");

                    b.HasIndex("DoctorId_Doctor");

                    b.HasIndex("EspecialidadesId_Especialidades");

                    b.HasIndex("PacienteId_Paciente");

                    b.ToTable("Citas");
                });

            modelBuilder.Entity("Citas_Medicas.Modelo.Diagnostico", b =>
                {
                    b.Property<int>("Id_Diagnostico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Diagnostico_Paciente")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DoctorId_Doctor")
                        .HasColumnType("int");

                    b.Property<int>("Id_Doctor")
                        .HasColumnType("int");

                    b.Property<int>("Id_Paciente")
                        .HasColumnType("int");

                    b.Property<int?>("PacienteId_Paciente")
                        .HasColumnType("int");

                    b.HasKey("Id_Diagnostico");

                    b.HasIndex("DoctorId_Doctor");

                    b.HasIndex("PacienteId_Paciente");

                    b.ToTable("Diagnosticos");
                });

            modelBuilder.Entity("Citas_Medicas.Modelo.Doctor", b =>
                {
                    b.Property<int>("Id_Doctor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellidos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EspecialidadesId_Especialidades")
                        .HasColumnType("int");

                    b.Property<int>("Id_Especialidades")
                        .HasColumnType("int");

                    b.Property<string>("Nombres")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Doctor");

                    b.HasIndex("EspecialidadesId_Especialidades");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("Citas_Medicas.Modelo.Especialidades", b =>
                {
                    b.Property<int>("Id_Especialidades")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Especialidad")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Especialidades");

                    b.ToTable("Especialidades");
                });

            modelBuilder.Entity("Citas_Medicas.Modelo.Paciente", b =>
                {
                    b.Property<int>("Id_Paciente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellidos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Domicilio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombres")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Paciente");

                    b.ToTable("Paciente");
                });

            modelBuilder.Entity("Citas_Medicas.Modelo.Citas", b =>
                {
                    b.HasOne("Citas_Medicas.Modelo.Doctor", "Doctor")
                        .WithMany("Citas")
                        .HasForeignKey("DoctorId_Doctor");

                    b.HasOne("Citas_Medicas.Modelo.Especialidades", "Especialidades")
                        .WithMany("Especialidades_Citas")
                        .HasForeignKey("EspecialidadesId_Especialidades");

                    b.HasOne("Citas_Medicas.Modelo.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId_Paciente");
                });

            modelBuilder.Entity("Citas_Medicas.Modelo.Diagnostico", b =>
                {
                    b.HasOne("Citas_Medicas.Modelo.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId_Doctor");

                    b.HasOne("Citas_Medicas.Modelo.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId_Paciente");
                });

            modelBuilder.Entity("Citas_Medicas.Modelo.Doctor", b =>
                {
                    b.HasOne("Citas_Medicas.Modelo.Especialidades", null)
                        .WithMany("Doctores")
                        .HasForeignKey("EspecialidadesId_Especialidades");
                });
#pragma warning restore 612, 618
        }
    }
}
